name: Deploy dashni to Hetzner # სამუშაო პროცესის სახელი

on: # ტრიიგერები, რომლებიც აამოქმედებს სამუშაო პროცესს
  push:
    branches: [ main ] # მხოლოდ მაშინ ამოქმედდება, როცა main ბრანჩზე მოხდება push

jobs: # სამუშაოები, რომლებიც შესრულდება
  BPD:
    runs-on: ubuntu-24.04 # სამუშაო გარემო, რომელზეც შესრულდება მოქმედებები
    
    env: # გარემოს ცვლადები
      DOCKER_IMAGE: "${{ github.ref_name }}:${{ github.sha }}" # Docker-ის იმიჯის სახელი
      DOCKER_IMAGE_TAR: "${{ github.ref_name }}.tar" # Docker-ის იმიჯის ტარის სახელი

    steps: # ნაბიჯები სამუშაოს შესასრულებლად
    - name: Set up QEMU # QEMU ინსტრუმენტის მომზადება
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx # Docker Buildx ინსტრუმენტის მომზადება
      uses: docker/setup-buildx-action@v3

    - name: Checkout repository # რეპოზიტორიის ჩატვირთვა
      uses: actions/checkout@v4

    - name: Build backend # Backend-ის იმიჯის აგება
      run: |
        cd backend
        docker build . -t backend-${{ env.DOCKER_IMAGE }} --platform linux/amd64

    - name: Build frontend # Frontend-ის იმიჯის აგება
      run: |
        cd frontend
        docker build . -t frontend-${{ env.DOCKER_IMAGE }} --platform linux/amd64

    - name: Save Docker Image backend # Backend-ის Docker იმიჯის შენახვა
      run: |
        docker save --output backend-${{ env.DOCKER_IMAGE_TAR }} backend-${{ env.DOCKER_IMAGE }} 
        chmod 664 backend-${{ env.DOCKER_IMAGE_TAR }}

    - name: Save Docker Image frontend # Frontend-ის Docker იმიჯის შენახვა
      run: |
        docker save --output frontend-${{ env.DOCKER_IMAGE_TAR }} frontend-${{ env.DOCKER_IMAGE }} 
        chmod 664 frontend-${{ env.DOCKER_IMAGE_TAR }}

    - name: Copy Docker image(backend) to host # Backend იმიჯის გადატანა ჰოსტზე
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        source: "backend-${{ env.DOCKER_IMAGE_TAR }}"
        target: "backend-${{ env.DOCKER_IMAGE_TAR }}"

    - name: Copy Docker image to host # Frontend იმიჯის გადატანა ჰოსტზე
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        source: "frontend-${{ env.DOCKER_IMAGE_TAR }}"
        target: "frontend-${{ env.DOCKER_IMAGE_TAR }}"

    - name: Load Docker Image # Docker იმიჯის ჩატვირთვა ჰოსტის მხარეს
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: | 
          docker load -i frontend-${{ env.DOCKER_IMAGE_TAR }}/frontend-${{ env.DOCKER_IMAGE_TAR }}
          docker load -i backend-${{ env.DOCKER_IMAGE_TAR }}/backend-${{ env.DOCKER_IMAGE_TAR }}

    - name: Update Docker Compose # Docker Compose ფაილის განახლება
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: | 
          yq w -i dashni/docker-compose.yml 'services.frontend-${{ github.ref_name }}.image' 'frontend-${{ github.ref_name }}:${{ github.sha }}'
          yq w -i dashni/docker-compose.yml 'services.backend-${{ github.ref_name }}.image' 'backend-${{ github.ref_name }}:${{ github.sha }}'

    - name: Recreate images # იმიჯების ხელახლა შექმნა
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: | 
          cd dashni
          docker rollout frontend-${{ github.ref_name }}
          docker rollout backend-${{ github.ref_name }}

    - name: Clean up old images # ძველი იმიჯების წაშლა
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: | 
          docker image prune -a -f
